<link type="text/css" rel="stylesheet" href="./styles/shCoreDefault.css">
<script type="text/javascript" src="./scripts/shCore.js"></script>
<script type="text/javascript" src="./scripts/shBrushJScript.js"></script>
<script type="text/javascript" src="./scripts/shBrushXml.js"></script>
<script type="text/javascript" src="./scripts/shBrushPhp.js"></script>
<script type="text/javascript">SyntaxHighlighter.all();</script>

<h1 align="center">Основные правила написания программ на РНР</h1>
<p>В этом разделе закладывается основание под правила структурирования программ на РНР. Это более основательные правила, чем просто вывод информации на экран или сложение двух чисел.
Их можно сравнить с рекомендацией читать страницы данной книги сверху вниз и слева направо или обращать больше внимания на выделенный черным текст, а не на крупные пробелы на странице.</p>
<p>Если у вас уже имеется хотя бы небольшой опыт программирования на РНР и вы предпочитаете поэкспериментировать с кнопками на своем новом проигрывателе типа Blu-Ray,
прежде чем ознако- миться с их назначением в руководстве пользователя, можете сразу перейти к главе 2, вернувшись к этому разделу впоследствии.
А если вы стремитесь безотлагательно писать программы на РНР, но они ведут себя неожиданно или содержат ошибки синтаксического анализа,
о которых сообщает интерпретатор РНР при попытке выполнить программу, обратитесь к материалу этого раздела за справкой.</p>
<p align="center">Начальные и конечные дескрипторы</p>
<p>В каждом из примеров программ, рассмотренных ранее в этой главе, применялись дескрипторы &lt;?php и ?> кода РНР как начальный и конечный соответственно.
Все, что находится за пределами этих дескрипторов, игнорируется интерпретатором РНР. Текст перед начальным дескриптором или после конечного дескриптора
выводится без вмешательства интерпретатора РНР. Конечный де- скриптор можно оставить в конце файла РНР. Если интерпретатор РНР достигает конца файла и не
обнаруживает конечный дескриптор РНР, он действует так, как будто это самый последний элемент в файле. Это очень удобно для гарантии того, что невидимый 
дополнительный материал (например, пустые строки) после конечного пробела не появится случайно в результате, выводимом из программы.</p>
<p>Программа на РНР может содержать несколько начальных и конечных пар дескрипторов, как демонстрируется в примере 1.8.</p>

<b>Пример 1.8. Несколько начальных и конечных пар дескрипторов</b>
<pre class="brush: php; html-script: true">
Five plus five is:
&lt;?php print 5 + 5; ?>
&lt;p>
Four plus four is:
&lt;?php
    print 4 + 4;
?>
&lt;p>
&lt;img src="vacation.jpg" alt="My Vacation" /></pre>

<p>Исходный код РНР, заключенный в каждую пару дескрипторов &lt;?php ?>, обрабатывается интерпретатором РНР, а остальная часть страницы выводится в исходном виде. 
Так, в результате выполнения кода из примера 1.8 выводится следующий результат:</p>
<pre class="brush: php; html-script: true">
Five plus five is:
10&lt;p>
Four plus four is:
8&lt;p>
&lt;img src="vacation.jpg" alt="My Vacation" /></pre>

<p>В ряде устаревших программ на РНР в качестве начального употребляется дескриптор &lt;?, а не &lt;?php. В таком случае дескриптор &lt;? называется коротким открывающим дескриптором, 
поскольку он короче, чем дескриптор &lt;?php. Но лучше все же пользоваться обычным открывающим дескриптором &lt;?php, поскольку этим гарантируется нормальная работа программы на любом 
сервере, где выполняется интерпретатор РНР. Поддержка короткого открывающего дескриптора может быть включена или отключена с помощью соответствующего параметра конфигурации РНР.
В приложении А поясняется, как видоизменить конфигурацию РНР, чтобы определить, какие именно открывающие дескрипторы оказываются достоверными в программах на РНР.</p>
<p>Все примеры программ, приведенных в остальной части этой главы, начинаются с дескриптора &lt;?php и оканчиваются дескриптором ?>. А в последующих главах не все примеры
программ содержат начальные и конечные дескрипторы. Но не забывайте, что они необходимы в программах для правильного распознавания написанного вами кода интерпретатором РНР.</p>
 
<h1 align="center"> Пробелы и учет регистра букв</h1>
<p>Как и все программы на РНР, примеры, представленные в этом разделе, состоят из последовательного ряда операторов, каждый из которых завершается точкой с запятой.
В одной строке кода можно разместить несколько операторов РНР, при условии, что они разделены точкой с запятой. Между операторами допускается любое количество пробелов,
которые игнорируются интерпретатором РНР. Точка с запятой указывает интерпретатору РНР на окончание одного оператора и начало другого. Отсутствие или большое количество
пробелов между операторами не оказывает никакого влияния на ход выполнения программы. Пробелами в программировании называют внешне пустые знаки пробела, табуляции и новой строки.</p>
<p>На практике рекомендуется вводить по одному оператору в каждой строке исходного кода, размещая пустые строки между операторами только в том случае, если это повышает удобочитаемость
исходного кода. Разрядка в примерах 1.9 и 1.10 произведена неудачно. Вместо этого исходный код следует форматировать так, как показано в примере. 1.11.</p>
 
<b>Пример 1.9. Этот код РНР чрезмерно сжат</b>
<pre class="brush: php; html-script: true">
&lt;?php print "Hello"; print " World!"; ?></pre>
 
<b>Пример 1.10. А этот код РНР чрезмерно растянут</b>
<pre class="brush: php; html-script: true">
&lt;?php
 
print "Hello";
 
print " World!";
 
?></pre>
 
<b>Пример 1.11. Этот код РНР отформатирован верно</b>
<pre class="brush: php; html-script: true">
&lt;?php
print "Hello";
print " World!”;
?></pre>
 
<p>Помимо пробелов между строками кода, интерпретатор РНР игнорирует пробелы между ключевыми словами данного языка и значениями. Так, между ключевым словом print и 
символьной строкой "Hello, World!" может быть один, сто или вообще ни одного пробела, как, впрочем, и между этой строкой и точкой с запятой в конце строки кода.</p>
<p>В качестве хорошего стиля программирования рекомендуется разделять оператор print и выводимое значение одним пробелом, а после этого значения сразу же указывать точку с запятой.
В примере 1.12 демонстрируются три строки кода с разной разрядкой: одна — чрезмерно растянута, другая — чрезмерно сжата, а третья — отформатирована верно.</p>
 
<b>Пример 1.12. Разрядка</b>
<pre class="brush: php; html-script: true">
&lt;?php
print 		      "Too many spaces";
print"Too few spaces";
print "Just the right amount of spaces";
?></pre>
 
<p>Ключевые слова языка PHP (например, print) и имена функций (например, number_format) указываются без учета регистра букв. Интерпретатор РНР не различает прописные и
строчные буквы в ключевых словах и именах функций, указываемых в программах. Так, операторы, приведенные в примере 1.13, одинаковы с точки зрения интерпретатора РНР.</p>
 
<b>Пример 1.13. Ключевые слова языка и имена функций указываются без учета регистра букв</b>
<pre class="brush: php; html-script: true">
&lt;?php
// Во всех приведенных ниже строках кода выполняется 
// одно и то же действие
print number_format(320853904);
PRINT Number_Format(320853904);
Print number_format(320853904);
pRiNt NUMBER_FORMAT(320853904);
?></pre>

<h1 align="center">Комментарии</h1>
<p>Как демонстрировалось в ряде примеров программ ранее в этой главе, комментарии служат для пояснения другим людям особенностей работы программы.
Комментарии в исходном коде составляют важную часть любой программы. Вводимый вами исходный код может казаться совершенно ясным, когда вы программируете. 
Но через несколько месяцев, когда вам потребуется вернуться к написанной программе, чтобы внести в нее изменения, логика ее выполнения может показаться не столь ясной и очевидной.
И здесь на помощь приходят комментарии. Объясняя простым языком принцип действия программы, комментарии делают ее намного более понятной.</p>
<p>Комментарии еще более важны для того, кто не является первоначальным автором программы, но должен внести в нее изменения. Сделайте одолжение себе и всем,
кому придется читать исходный код вашей программы, снабдив ее обильными комментариями.</p>
<p>В языке РНР предусмотрены самые разные способы снабжения программ комментариями в силу их особой важности. Так, в приведенных ранее примерах строки комментариев 
начинались со знаков //. Эти знаки указывают интерпретатору РНР считать всю остальную строку комментарием. А по окончании строки комментария исходный код интерпретируется,
как обычно. Подобный стиль комментариев применяется и в других языках программирования, в том числе C++, JavaScript и Java. Знаки // можно указывать в строке кода и
после оператора, и тогда остальная часть строки интерпретируется как комментарий. В языке РНР поддерживаются также однострочные комментарии в стиле языка Perl
и командного процессора. Такие комментарии начинаются со знака #. Комментарии можно начинать со знака # там же, где они начинаются со знаков //, но в современном 
стиле программирования предпочтение все же отдается знакам //. Некоторые образцы однострочных комментариев приведены в примере 1.14.</p>
 
 
<b>Пример 1.14. Однострочные комментарии, обозначаемые знаками // и #</b>
<pre class="brush: php; html-script: true">
&lt;?php
// Это строка комментария print "Smoked Fish Soup "; print 'costs $3.25.';
# ввести еще одно блюдо в меню
print 'Duck with Pea Shoots ';
print 'costs $9.50.';
// Знаки // или # можно употреблять в однострочных 
// комментариях. Комментарии начинаются со знаков 
// // или # в любом другом месте строки кода
print 'Shark Fin Soup'; // Надеюсь, что это вкусно! 
print 'costs $25.00!'; # А это дороговато!
# Комментарии не начинаются со знаков // или #,
# указываемых в символьной строке
print 'http://www.example.com';
print 'http://www.example.com/menu.php#dinner';
?></pre>

<p>Многострочные комментарии начинаются со знаков /* и оканчиваются знаками */. А все, что находится между знаками /* и */,
воспринимается интерпретатором РНР как комментарий. Мно- гострочные комментарии удобны для временного отключения небольшого блока кода.
Некоторые образцы многострочных комментариев приведены в примере 1.15.</p>

<b>Пример 1.15. Многострочные комментарии</b>
<pre class="brush: php; html-script: true">
&lt;?php
/* Мы собираемся ввести в меню следующие блюда:
    - Суп из копченой рыбы
    - Утка с гороховыми побегами
    - Суп из акульих плавников
*/
print 'Smoked Fish Soup, Duck with Pea Shoots, Shark Fin Soup '; 
print 'Cost: 3.25 + 9.50 + 25.00';
/* А это прежнее меню:
Приведенные ниже строки кода заключены в данный комментарий, и поэтому они не выполняются.
print 'Hamburger, French Fries, Cola ';
print 'Cost: 0.99 + 1.25 + 1.50';
*/
?></pre>

<p>В языке PHP не существует строгих правил в отношении наилучшего стиля комментариев. Многострочные комментарии зачастую наиболее удобны в употреблении,
особенно если требуется закомментировать блок кода или описать функцию в нескольких строках. Но если требуется присоединить краткое пояснение в конце строки кода, 
то для этой цели вполне подойдет комментарий в стиле //. Пользуйтесь тем стилем комментариев, который вам больше всего подходит.</p>