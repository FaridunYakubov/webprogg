<link type="text/css" rel="stylesheet" href="./styles/shCoreDefault.css">
<script type="text/javascript" src="./scripts/shCore.js"></script>
<script type="text/javascript" src="./scripts/shBrushJScript.js"></script>
<script type="text/javascript" src="./scripts/shBrushXml.js"></script>
<script type="text/javascript" src="./scripts/shBrushPhp.js"></script>
<script type="text/javascript">SyntaxHighlighter.all();</script>

<h1 align="center">РНР в действии</h1>
<p>Итак, готовы ли вы сделать свою первую попытку воспользоваться РНР? В этом разделе представлен ряд листингов программ на РНР и поясняется их назначение.
Если вам непонятно, что происходит в каждом из листингов, не отчаивайтесь! Пояснению особенностей программирования на РНР посвящена остальная часть данной книги.
Проанализируйте эти листинги, чтобы получить некоторое представление о программах на РНР и принципе их действия, не пытаясь вдаваться в подробности.</p>
<p>Когда программа запускается на выполнение, интерпретатор РНР уделяет внимание только тем частям программы, которые находятся между начальными и конечными дескрипторами РНР.
А все, что находится за пределами этих дескрипторов, выводится на экран без всяких видоизменений. Благодаря этому упрощается встраивание небольших фрагментов кода РНР на страницах,
которые содержат в основном HTML- разметку. Интерпретатор РНР выполняет команды, находящиеся между начальным &lt;?php и конечным ?> дескрипторами РНР. Как правило,
РНР-страницы находятся в файлах с расширением .php. В примере 1.1 демонстрируется разметка страницы с одной командой РНР.</p>
<img src="image/1.3.png" width = "555">
<p align="center">Рис. 1.3: Приветствие на РНР</p>
<b>Пример 1.1. Здравствуй, мир!</b>
<pre class="brush: php; html-script: true">
&lt;html>
&lt;head>&lt;title>PHP says hello&lt;/title>&lt;/head>
&lt;body>
&lt;b>
&lt;?php
print "Hello, World!";
?>
&lt;/b>
&lt;/body>
&lt;/html></pre>

<p>Результат выполнения кода из примера 1.1 приведен ниже. А в окне веб-браузера он выглядит так, как показано на рис. 1.3.</p>

<pre class="brush: php; html-script: true">
&lt;html>
&lt;head>&lt;title>PHP says hello&lt;/title>&lt;/head> &lt;body>
&lt;b>
Hello, World!&lt;/b>
&lt;/body>
&lt;/html></pre>

<p>Но вывод на экран сообщения, которое вообще не изменяется, не особенно впечатляет. Ведь сообщение "Hello, World!" (Здравствуй, мир!) можно было бы с тем же успехом включить
в состав простой HTML-страницы. Больше пользы может принести вывод динамических данных, т.е. такой информации, которая изменяется. Одним из самых распространенных источников
информации для программ на РНР служит сам пользователь. В частности, браузер отображает заполняемую форму, пользователь вводит информацию в этой форме и щелкает на кнопке для
передачи формы на обработку, а браузер посылает ее на сервер, где она в конечном итоге передается интерпретатору РНР, доступному в программе обработки данной формы.</p>
<p>В примере 1.2 демонстрируется HTML-форма без кода РНР. Она состоит лишь из текстового по- 
ля user и кнопки Submit (Передать) и передается на обработку программе из файла sayhello.php,указанного в атрибуте action дескриптора &lt;form>.</p>

<img src="image/1.4.png" width = "555">
<p align="center">Рис. 1.4: Вывод формы на экран</p>
<b>Пример 1.2. HTML-форма для передачи введенных данных на обработку </b>
<pre class="brush: php; html-script: true">
&lt;form method="POST" action="sayhello.php">
Your Name: &lt;input type="text" name="user" />
&lt;br/>
&lt;button type="submit"">Say Hello&lt;/button>
&lt;/form></pre>

<p>HTML-форма из примера 1.2 воспроизводится в окне браузера так, как показано на рис. 1.4.</p>
<p>В примере 1.3 демонстрируется программа из файла sayhello.php, выводящая на экран при-
ветствие всякому, кто введет свое имя в текстовом поле данной формы.</p>

<b>Пример 1.3. Динамические данные</b>
<pre class="brush: php; html-script: true">
&lt;?php
print "Hello, ";
// вывести на экран значение параметра 'user'
// из переданной на обработку формы
print $_POST['user'];
print "!";
?></pre>

<p>Если вы введете Ellen в текстовом поле и передадите ее на обработку, то программа из примера 1.3 выведет на экран сообщение "Hello, Ellen!". 
На рис. 1.5 показано, каким образом это сообщение отображается в окне веб-браузера.</p>
<p>Переменная $_POST содержит значения параметров формы, передаваемой на обработку. В терминологии программирования переменная называется так потому, что содержащееся в ней 
значение можно изменять. В частности, переменная типа массива содержит не одно, а целый ряд значений. В общем, массивы обсуждаются в главе 4, а более подробно — в главе 7.</p>
<p>В данном примере строка кода, начинающаяся со знаков //, называется строкой комментария. Строки комментариев присутствуют в исходном коде и предназначены для пояснения принципа
действия исходного кода тем, кто его читает. Они игнорируются интерпретатором РНР. Комментарии удобны для аннотирования программ сведениями о том, как они работают. 
Более подробно комментарии обсуждаются далее, в разделе “Комментарии”.</p>
<p>Средствами РНР можно также вывести на экран HTML-форму, позволяющую передать значение параметра user, как демонстрируется в примере 1.4.</p>


<img src="image/1.5.png" width = "555">
<p align="center">Рис. 1.5: Вывод параметра формы на экран</p>

<b>Пример 1.4. Вывод формы на экран</b> 
<pre class="brush: php; html-script: true">
&lt;?php
print <<<_HTML_
&lt;form method="post" action="$_SERVER[PHP_SELF]">
Your Name: &lt;input type="text" name="user" />
&lt;br/>
&lt;button type="submit">Say Hello&lt;/button>
&lt;/form>
_HTML_;
?></pre>

<p>В примере 1.4 применяется строковый синтаксис, называемый встраиваемым документом (дословно “здесь документ” — here document). Все, что находится между идентификаторами
<<<_HTML_ и _HTML_, передается команде print для отображения на экране. Как и в примере 1.3, $_SERVER
[PHP_SELF] обозначает переменную. Это специальная переменная, которая содержит URL текущей страницы (без указания сетевого протокола или имени хоста, т.е. веб-узла). 
Так, если URL страницы из примера 1.4 равен http://www.example.com/users/enter.php, то переменная $_SERVER[PHP_SELF] содержит значение /users/enter.php.</p>
<p>Указав переменную $_SERVER[PHP_SELF] в качестве обработчика формы, можно разместить на той же самой странице код для вывода формы на экран и выполнения какого-нибудь действия 
над данными, передаваемыми в этой форме на обработку. Пример 1.5 сочетает в себе примеры 1.3 и 1.4 для формирования одной страницы, где отображается форма и выводится приветствие,
когда эта форма передается на обработку.</p>
 
<b>Пример 1.5. Вывод формы или приветствия на экран</b>
 
<pre class="brush: php; html-script: true">
&lt;?php
// вывести на экран приветствие, если форма
// передана на обработку
if ($_POST['user']) {
print "Hello,
	// вывести на экран значение параметра 'user' из 
	// переданной на обработку формы
	print $_POST['user'];
	print "!";
} else {
	// иначе - вывести на экран саму форму
print <<<_HTML_
	&lt;form method="post" action="$_SERVER[PHP_SELF]">
	Your Name: &lt;input type="text" name="user" /> &lt;br/>
	&lt;button type="submit">Say Hello&lt;/button>
	&lt;/form>
	HTML_;
}
?></pre>
 
<p>В примере 1.5 используется конструкция if(), чтобы проверить, отправил ли браузер значение параметра user из формы, переданной на обработку. 
Эта конструкция позволяет выбрать одно из следующих действий: вывести на экран приветствие или же саму форму. Более подробно конструкция if()
обсуждается в главе 3, а применение переменной $_SERVER[PHP_SELF] и обработка форм — в главе 7.</p>
<p>В языке РНР имеется огромная библиотека внутренних функций, которые можно применять в своих программах. Эти функции помогают решать типичные задачи. 
К ним относится встроенная функция number_format(), предоставляющая отформатированный вариант числа. В примере 1.6 она применяется для вывода числа на экран.</p>

<b>Пример 1.5. Вывод отформатированного числа на экран</b>
<pre class="brush: php; html-script: true">
&lt;?php
print "The population of the US is about: ";
print number_format(320853904);
?></pre>
<b>Выполнение кода из примера 1.6 дает следующий результат:</b>
<p>The population of the US is about: 320,853,904</p>

<p>Функциям полностью посвящена глава 5. В ней поясняется написание собственных функций, а также синтаксис вызова функций и обработки результатов их выполнения.
У многих функций, включая и упомянутую выше функцию number_format(), имеется возвращаемое значение. Оно получается в результате выполнения функции.
Так, в примере 1.6 второму оператору print пе- редается значение, возвращаемое функцией number_format(). 
В данном случае это численность населения США в формате с разделением запятой разрядов в целой части числа.</p>
<p>К числу наиболее распространенных типов программ, написанных на РНР, относится программа, отображающая веб-страницу, 
содержащую информацию, извлекаемую из базы данных. Если позволить параметрам передаваемой на обработку формы управлять 
процессом извлечения информации из базы данных, то тем самым можно добиться интерактивности веб-сайта. 
В примере 1.7 демон- стрируется программа на РНР, подключающаяся к серверу базы данных, извлекающая список блюд и цены на них,
исходя из значения параметра meal в форме, а затем выводящая на экран эти блюда и цены на них в HTML-таблице.</p>
 
<b>Пример 1.7. Отображение информации из базы данных</b>
<pre class="brush: php; html-script: true">
&lt;?php
// использовать базу данных SQLite из файла 'dinner.db'
$db = new PDO('sqlite:dinner.db');
// определить, какие блюда имеются
$meals = array('breakfast','lunch','dinner');
// проверить, содержит ли параметр "meal" переданной
// на обработку формы одно из строковых значений
// "breakfast", "lunch" или "dinner"
if (in_array($_POST['meal'], $meals)) {
	// Если данный параметр содержит указанное значение,
	// получить все блюда для указанной трапезы
	$stmt = $db->prepare('SELECT dish,price FROM meals
									WHERE meal LIKE ?');
	$stmt->execute(array($_POST['meal']));
	$rows = $stmt->fetchAll();
	// Если блюда в базе данных не обнаружены, сообщить от этом
	if (count($rows) == 0) {
		print "No dishes available.";
	} else {
		// вывести на экран каждое блюдо и цену на него
		// в отдельной строке HTML-таблицы
		print '&lt;table>&lt;tr>&lt;th>Dish&lt;/th>&lt;th>Price&lt;/th>&lt;/tr>';
		foreach ($rows as $row) {
			print "&lt;tr&lt;td>$row[0]&lt;/td>&lt;td>$row[1]&lt;/td>&lt;/tr>";
		}
		print "&lt;/table>";
	}
} else {
	// Это сообщение выводится на экран в том случае,
	// если параметр "meal" переданной на обработку формы
	// не содержит ни одно из строковых значений
	// "breakfast", "lunch" или "dinner"
	print "Unknown meal.";
}
?></pre>

<p>В примере 1.7 происходит немало интересного, но о простоте и эффективности РНР свидетельствует тот факт, что для формирования динамической веб-страницы с поддержкой
базы данных потребовалось всего лишь 20 строк кода, не считая комментарии. Ниже поясняется, что же происходит в этих 20 строках кода.</p>
<p>Функция new PDO(), вызываемая в самом начале рассматриваемого здесь примера программы, устанавливает соединение с базой данных SQLite, находящейся в отдельном файле.
Эта и другие функции обращения к базе данных из данного примера, в том числе prepare(), execute() и fetchAll(), подробнее поясняются в главе 8.</p>
<p>Элементы кода, начинающиеся в данном примере со знака $, например, $db, $_POST, $stmt или $row, являются переменными. В переменных хранятся значения, которые могут 
изменяться по ходу выполнения программы или задаваться и сохраняться в какой-то момент ее выполнения для последующего применения. Более подробно переменные обсуждаются в главе 2.</p>
<p>Следующая задача после подключения к базе данных состоит в том, чтобы выяснить, какую именно трапезу заказал пользователь. Массив $meals инициализируется для хранения 
дозволенных видов трапезы: breakfast (завтрак), lunch (ленч) и dinner (обед). В операторе in_array($POST['meal'], $meals) проверяется, содержится ли значение ($_POST['meal']) 
параметра meal из переданной на обработку формы в массиве $meals. Если это значение в нем отсутствует, выполнение сразу же переходит в самый конец данного примера программы, 
где вслед за последним оператором else на экран выводится сообщение "Unknown meal" (Неизвестная тра- пеза).</p>
<p>Если была передана дозволенная трапеза, функции prepare() и execute() посылают запрос в базу данных. Так, если заказана трапеза breakfast, то посылается следующий запрос:</p>
<p>SELECT dish,price FROM meals WHERE meal LIKE 'breakfast'</p>

<p>Запросы базы данных SQLite и большинства других реляционных баз данных составляются на языке Structured Query Language (язык структурированных запросов — SQL), 
основы которого представлены в главе 8. Функция prepare() возвращает идентификатор, которым можно воспользоваться для получения дополнительной информации о запросе.</p>
<p>Упомянутый выше идентификатор применяется в функции fetchAll() для получения всех совпадающих трапез, обнаруженных в базе данных по запросу. Если же в ней отсутствуют 
подходящие трапезы, рассматриваемая здесь программа выводит на экран сообщение "No dishes available" (Блюда отсутствуют). В противном случае она отображает информацию 
о совпадающих трапезах.</p>
<p>Далее программа выводит на экран начало HTML-таблицы, а затем обрабатывает в конструкции foreach каждое блюдо, обнаруженное по запросу. 
Элементы массива, возвращаемого функцией fetchAll(), используются в операторе print для отображения блюд в отдельных строках HTML- таблицы.</p>